using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using JazzyLucas.Core.Utils;
using UnityEditor;
using UnityEngine;
using L = JazzyLucas.Core.Utils.Logger;

namespace JazzyLucas.Editor
{
    public class AssetReferenceScriptGenerator : UnityEditor.Editor
    {
        private const string DEFAULT_CONFIG_SO_PATH = "Assets/Plugins/JazzyLucas/Editor/AssetReferenceScriptGeneratorConfig.asset";

        [MenuItem("Tools/JazzyLucas.Editor/Run Default GenerateAssetReferences")]
        public static void GeneratePrefabReferences()
        {
            L.Log($"Running Default GeneratePrefabReferences()");

            if (!LoadOrCreateDefaultConfig(out var config))
            {
                L.Log(LogSeverity.ERROR, "Failed to create or load the default config.");
                return;
            }

            GeneratePrefabReferences(config);
        }

        public static void GeneratePrefabReferences(AssetReferenceScriptGeneratorConfigSO config)
        {
            string assetsPath = config.AssetsPath;
            string outputPath = config.OutputPath;
            string fileName = config.FileName;
            string className = config.ClassName;

            L.Log($"Starting generation of prefab references from {assetsPath} to {outputPath}");

            if (!Directory.Exists(outputPath))
            {
                Directory.CreateDirectory(outputPath);
                L.Log($"Created output directory at {outputPath}");
            }

            var fileContents = GenerateFileContents(config, className, assetsPath);

            var filePath = Path.Combine(outputPath, $"{fileName}.cs");
            File.WriteAllText(filePath, fileContents);
            L.Log($"Prefab references written to {filePath}");

            AssetDatabase.Refresh();
        }

        private static string GenerateFileContents(AssetReferenceScriptGeneratorConfigSO config, string className,
            string assetsPath)
        {
            var pathOfConfigAsset = AssetDatabase.GetAssetPath(config);
            
            StringBuilder sb = new();
            
            sb.AppendLine("// ------------------------------------------------------------------------------");
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     This code was generated by a JazzyLucas AssetReferenceScriptGenerator ");
            sb.AppendLine($"//     with config from {pathOfConfigAsset}.");
            sb.AppendLine("// ");
            sb.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            sb.AppendLine("//     the code is regenerated.");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("// ------------------------------------------------------------------------------");
            sb.AppendLine();
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEditor;");
            sb.AppendLine();
            sb.AppendLine($"public static class {className}");
            sb.AppendLine("{");
            GeneratePrefabClasses(config, assetsPath, sb, 1);
            sb.AppendLine("}");

            string fileContents = sb.ToString();
            return fileContents;
        }

        private static void GeneratePrefabClasses(AssetReferenceScriptGeneratorConfigSO config, string directory, StringBuilder sb, int indentLevel)
        {
            var indent = new string(' ', indentLevel * 4);

            // Check if directory is in the blacklist
            if (IsPathBlacklisted(config, directory))
            {
                L.Log($"Directory {directory} is blacklisted. Skipping.");
                return;
            }

            foreach (var subdirectory in Directory.GetDirectories(directory))
            {
                if (IsPathBlacklisted(config, subdirectory))
                {
                    L.Log($"Subdirectory {subdirectory} is blacklisted. Skipping.");
                    continue;
                }

                if (Directory.GetFiles(subdirectory, "*.prefab").Any() || Directory.GetDirectories(subdirectory).Any())
                {
                    var folderName = CapitalizeFirstLetter(Path.GetFileName(subdirectory).Replace(" ", "_"));
                    sb.AppendLine($"{indent}public static class {folderName}");
                    sb.AppendLine($"{indent}{{");
                    GeneratePrefabClasses(config, subdirectory, sb, indentLevel + 1);
                    sb.AppendLine($"{indent}}}");
                    L.Log($"Added class for directory: {subdirectory}");
                }
                else
                {
                    L.Log($"Skipped empty directory: {subdirectory}");
                }
            }

            foreach (var file in Directory.GetFiles(directory, "*.prefab"))
            {
                if (IsPathBlacklisted(config, file))
                {
                    L.Log($"File {file} is blacklisted. Skipping.");
                    continue;
                }

                var fileName = CapitalizeFirstLetter(Path.GetFileNameWithoutExtension(file).Replace(" ", "_"));
                var relativePath = file.Replace(Application.dataPath, "Assets").Replace("\\", "/");
                sb.AppendLine($"{indent}public static readonly GameObject {fileName} = AssetDatabase.LoadAssetAtPath<GameObject>(\"{relativePath}\");");
                L.Log($"Added prefab reference for file: {file} as {fileName}");
            }
        }

        private static bool LoadOrCreateDefaultConfig(out AssetReferenceScriptGeneratorConfigSO config)
        {
            config = AssetDatabase.LoadAssetAtPath<AssetReferenceScriptGeneratorConfigSO>(DEFAULT_CONFIG_SO_PATH);

            if (config is null)
            {
                L.Log(LogSeverity.ERROR, $"Config SO not found at {DEFAULT_CONFIG_SO_PATH}. Creating default config file.");

                config = CreateInstance<AssetReferenceScriptGeneratorConfigSO>();
                AssetDatabase.CreateAsset(config, DEFAULT_CONFIG_SO_PATH);
                AssetDatabase.RenameAsset(DEFAULT_CONFIG_SO_PATH, "DefaultAssetReferenceScriptGeneratorConfig");
                AssetDatabase.SaveAssets();
                
                L.Log($"Default config SO created at {DEFAULT_CONFIG_SO_PATH}");
                L.Log($"Please verify config, then run again.");
                return false;
            }

            L.Log($"Config loaded: Prefabs Path = {config.AssetsPath}, Output Path = {config.OutputPath}");
            return true;
        }

        private static bool IsPathBlacklisted(AssetReferenceScriptGeneratorConfigSO config, string path) => config.Blacklist.Any(blacklistedPath => path.StartsWith(blacklistedPath, StringComparison.OrdinalIgnoreCase));

        private static string CapitalizeFirstLetter(string input) => string.IsNullOrEmpty(input) ? input : char.ToUpper(input[0]) + input[1..];
    }
}
