using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using JazzyLucas.Core.Utils;
using UnityEditor;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Video;
using L = JazzyLucas.Core.Utils.Logger;

namespace JazzyLucas.Editor
{
    public class AssetReferenceScriptGenerator : UnityEditor.Editor
    {
        private const string DEFAULT_CONFIG_SO_PATH = "Assets/Plugins/JazzyLucas/Editor/AssetReferenceScriptGeneratorConfig.asset";

        [MenuItem("Tools/JazzyLucas.Editor/Run Default GenerateAssetReferences")]
        public static void GeneratePrefabReferences()
        {
            L.Log($"Running Default GeneratePrefabReferences()");

            if (!LoadOrCreateDefaultConfig(out var config))
            {
                L.Log(LogSeverity.ERROR, "Failed to create or load the default config.");
                return;
            }

            GeneratePrefabReferences(config);
        }

        public static void GeneratePrefabReferences(AssetReferenceScriptGeneratorConfigSO config)
        {
            string assetsPath = config.AssetsPath;
            string outputPath = config.OutputPath;
            string fileName = config.FileName;
            string className = config.ClassName;

            L.Log($"Starting generation of prefab references from {assetsPath} to {outputPath}");

            if (!Directory.Exists(outputPath))
            {
                Directory.CreateDirectory(outputPath);
                L.Log($"Created output directory at {outputPath}");
            }

            var fileContents = GenerateFileContents(config, className, assetsPath);

            var filePath = Path.Combine(outputPath, $"{fileName}.cs");
            File.WriteAllText(filePath, fileContents);
            L.Log($"Prefab references written to {filePath}");

            AssetDatabase.Refresh();
        }

        private static string GenerateFileContents(AssetReferenceScriptGeneratorConfigSO config, string className,
            string assetsPath)
        {
            var pathOfConfigAsset = AssetDatabase.GetAssetPath(config);
            
            StringBuilder sb = new();
            
            sb.AppendLine("// ------------------------------------------------------------------------------");
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     This code was generated by a JazzyLucas AssetReferenceScriptGenerator ");
            sb.AppendLine($"//     with config from {pathOfConfigAsset}.");
            sb.AppendLine("// ");
            sb.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            sb.AppendLine("//     the code is regenerated.");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("// ------------------------------------------------------------------------------");
            sb.AppendLine();
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEditor;");
            sb.AppendLine();
            sb.AppendLine($"public static class {className}");
            sb.AppendLine("{");
            GeneratePrefabClasses(config, assetsPath, sb, 1);
            sb.AppendLine("}");

            string fileContents = sb.ToString();
            return fileContents;
        }

        private static void GeneratePrefabClasses(AssetReferenceScriptGeneratorConfigSO config, string directory, StringBuilder sb, int indentLevel)
        {
            var indent = new string(' ', indentLevel * 4);
            bool directoryHasValidAssets = false;

            // Check if directory is in the blacklist
            if (IsPathBlacklisted(config, directory)) return;

            foreach (var subdirectory in Directory.GetDirectories(directory))
            {
                if (IsPathBlacklisted(config, subdirectory)) continue;

                StringBuilder subdirectorySb = new StringBuilder();
                GeneratePrefabClasses(config, subdirectory, subdirectorySb, indentLevel + 1);

                if (subdirectorySb.Length > 0)
                {
                    // Sanitize folder names
                    var folderName = SanitizeName(Path.GetFileName(subdirectory));
                    sb.AppendLine($"{indent}public static class {folderName}");
                    sb.AppendLine($"{indent}{{");
                    sb.Append(subdirectorySb);
                    sb.AppendLine($"{indent}}}");
                    directoryHasValidAssets = true;
                }
            }

            foreach (var file in Directory.GetFiles(directory))
            {
                if (IsPathBlacklisted(config, file)) continue;

                if (!IsValidAssetType(file, config)) continue;

                var fileName = SanitizeName(Path.GetFileNameWithoutExtension(file));
                var relativePath = file.Replace(Application.dataPath, "Assets").Replace("\\", "/");

                var assetType = AssetDatabase.GetMainAssetTypeAtPath(file);

                sb.AppendLine($"{indent}public static readonly {assetType.Name} {fileName} = AssetDatabase.LoadAssetAtPath<{assetType.Name}>(\"{relativePath}\");");
                directoryHasValidAssets = true;
            }

            if (!directoryHasValidAssets)
            {
                sb.Clear();
            }
        }

        private static bool LoadOrCreateDefaultConfig(out AssetReferenceScriptGeneratorConfigSO config)
        {
            config = AssetDatabase.LoadAssetAtPath<AssetReferenceScriptGeneratorConfigSO>(DEFAULT_CONFIG_SO_PATH);

            if (config is null)
            {
                L.Log(LogSeverity.ERROR, $"Config SO not found at {DEFAULT_CONFIG_SO_PATH}. Creating default config file.");

                config = CreateInstance<AssetReferenceScriptGeneratorConfigSO>();
                AssetDatabase.CreateAsset(config, DEFAULT_CONFIG_SO_PATH);
                AssetDatabase.RenameAsset(DEFAULT_CONFIG_SO_PATH, "DefaultAssetReferenceScriptGeneratorConfig");
                AssetDatabase.SaveAssets();
                
                L.Log($"Default config SO created at {DEFAULT_CONFIG_SO_PATH}");
                L.Log($"Please verify config, then run again.");
                return false;
            }

            L.Log($"Config loaded: Prefabs Path = {config.AssetsPath}, Output Path = {config.OutputPath}");
            return true;
        }
        
        private static bool IsValidAssetType(string filePath, AssetReferenceScriptGeneratorConfigSO config)
        {
            var assetType = AssetDatabase.GetMainAssetTypeAtPath(filePath);
            var extension = Path.GetExtension(filePath).ToLower();

            if (config.ValidAssetTypes.Prefabs && extension == ".prefab") return true;
            if (config.ValidAssetTypes.Materials && extension == ".mat") return true;
            if (config.ValidAssetTypes.ScriptableObjects && assetType == typeof(ScriptableObject)) return true;
            if (config.ValidAssetTypes.Textures && extension is ".png" or ".jpg" or ".tga" or ".psd") return true;
            if (config.ValidAssetTypes.Meshes && assetType == typeof(Mesh)) return true;
            if (config.ValidAssetTypes.Animations && assetType == typeof(AnimationClip)) return true;
            if (config.ValidAssetTypes.AudioClips && extension == ".mp3" || extension == ".wav") return true;
            if (config.ValidAssetTypes.Shaders && extension == ".shader") return true;
            if (config.ValidAssetTypes.Fonts && extension == ".ttf") return true;
            if (config.ValidAssetTypes.VideoClips && extension == ".mp4") return true;
            if (config.ValidAssetTypes.Sprites && assetType == typeof(Sprite)) return true;
            if (config.ValidAssetTypes.ParticleSystems && assetType == typeof(ParticleSystem)) return true;
            if (config.ValidAssetTypes.NavMeshData && assetType == typeof(NavMeshData)) return true;
            if (config.ValidAssetTypes.LightingData && assetType == typeof(LightingDataAsset)) return true;
            if (config.ValidAssetTypes.PhysicsMaterials && extension is ".physicmaterial" or ".physicmaterial2d") return true;
            if (config.ValidAssetTypes.Terrains && assetType == typeof(Terrain)) return true;
            if (config.ValidAssetTypes.RenderTextures && extension == ".rendertexture") return true;

            return false;
        }
        
        private static bool IsPathBlacklisted(AssetReferenceScriptGeneratorConfigSO config, string path) => config.Blacklist.Any(blacklistedPath => path.StartsWith(blacklistedPath, StringComparison.OrdinalIgnoreCase));
        
        private static string SanitizeName(string input)
        {
            var sanitized = System.Text.RegularExpressions.Regex.Replace(input, @"[^a-zA-Z0-9_]", "_");

            if (char.IsDigit(sanitized[0]))
            {
                sanitized = "_" + sanitized;
            }

            return CapitalizeFirstLetter(sanitized);
        }
        private static string CapitalizeFirstLetter(string input)
        {
            if (string.IsNullOrEmpty(input)) return input;
            return char.ToUpper(input[0]) + input.Substring(1);
        }
    }
}
